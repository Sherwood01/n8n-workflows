name: Deploy GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - 'workflows/**'
      - 'docs/**'
      - 'scripts/**'
      - 'workflow_db.py'
      - 'create_categories.py'
  workflow_dispatch:  # 允许手动触发

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 同一时间只允许一个部署进行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-22.04 # 使用一个稳定的长期支持版本
    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置Python环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3. 安装依赖
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. 初始化数据库并生成索引 (修正后的关键步骤)
      - name: Initialize database and generate search index
        run: |
          # 创建必要的目录
          mkdir -p database
          # 首先运行 --reindex 来创建数据库和基础数据
          python run.py --reindex
          # 然后执行索引和分类创建
          python workflow_db.py --index --force
          python create_categories.py
          # 最后生成用于静态站点的搜索索引
          python scripts/generate_search_index.py

      # 5. 设置静态站点构建的路径
      # 假设 generate_search_index.py 脚本已将最终静态文件输出到 'site' 目录
      # 如果输出目录是 'docs'，则将此路径改为 './docs'
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 6. 上传构建产物 (请确认您的脚本输出目录)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 此路径必须包含最终的 index.html 文件
          # 请根据 generate_search_index.py 脚本的实际输出目录进行修改
          # 常见目录为 './site' 或 './docs' 或 './dist'
          path: ./site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-22.04
    needs: build # 确保在 build 任务成功完成后才运行
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
